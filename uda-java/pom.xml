<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
<!--    指定了pom.xml文件使用的XML schema版本-->
    <modelVersion>4.0.0</modelVersion>

    <!-- 项目的基本信息 -->
    <!-- 项目的组名，通常是反转的域名，比如com.example -->
    <groupId>com.runyin</groupId>
    <!-- 项目的唯一标识符，通常是项目的名称 -->
    <artifactId>uda-java</artifactId>
    <!-- 项目的版本号 -->
    <version>1.0.0</version>
    <!-- 项目的打包方式 -->
    <packaging>jar</packaging>

    <!--
    声明当前 Maven 项目的父项目，它可以将若干个 Maven 项目组织成一个整体，指定版本号，插件版本号等，便于管理和维护
    继承 Spring Boot 父 POM，它提供了默认的依赖管理和插件配置 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.15</version> <!-- 选择支持 JDK 1.8 的 Spring Boot 2.x 版本 -->
        <relativePath/> <!-- lookup parent from repository -->
    </parent>


    <!--
    声明当前 Maven 项目包含的模块子项目，每个子项目都是一个独立的 Maven 项目，具有自己的 pom.xml 文件，可以进行独立构建和测试
    -->
    <modules>
        <!--
        <module>uda-admin</module>
        <module>uda-database</module>
        <module>uda-web-app</module>
        <module>uda-desktop-app</module>
        <module>uda-phone-app</module>
        -->
    </modules>


    <!--
    scm 又叫 Software Configuration Management,即软件配置管理， 与我们以前提到过的版本控制有关，
    是Maven中用于指定源代码版本控制信息的标签。它可以帮助Maven获取源代码并将构建生成的二进制文件提交到版本控制系统中。
    scm标签通常用于指定源代码管理系统的类型、URL、开发者连接等详细信息。
    -->
    <scm>
        <!-- 指定连接到SCM的URL，可以使用HTTP或者SSH协议 -->
<!--        <connection>scm:git:git://github.com/username/repo.git</connection>-->
        <!-- 指定开发者连接到SCM的URL，通常使用SSH协议 -->
<!--        <developerConnection>scm:git:ssh://github.com/username/repo.git</developerConnection>-->
        <!-- 指定SCM的web页面URL，方便开发者查看SCM信息 -->
<!--        <url>http://github.com/username/repo/tree/master</url>-->
        <!-- 当前Maven构件的版本在SCM中对应的标记 -->
<!--        <tag>1.0.0</tag>-->
    </scm>

    <!--
    严格来说，并不一定是项目本身的信息，而是人为设置的属性或者说宏，这个标签用来定义和管理项目中所需要的属性，其作用有以下几个：
    统一管理项目中的常用属性，比如版本号、路径、插件版本等，方便统一修改和管理。
    可以在配置过程中使用 ${…}占位符引用这些属性，使得配置更加灵活和便捷。
    避免硬编码，提高代码的可维护性和可读性
    -->
    <properties>
        <!-- 设置 Java 版本 -->
        <java.version>1.8</java.version>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>


    <!--
    项目的依赖列表
    -->
    <dependencies>
        <!--
        该标签用于指定一个依赖项，它包含以下几个子标签

        <groupId>：指定依赖项的groupId，项目的组名
        <artifactId>：指定依赖项的artifactId，项目的唯一标识符
        <version>：指定依赖项的版本号。
        <scope>：指定依赖项在项目中的使用范围。
        其中的 <scope>一般包含以下几种范围：常用的有compile、test、provided 和 runtime：

        compile：依赖库默认的 scope，表示该依赖库在编译、测试、运行时均需要使用。
        provided：表示该依赖库只在编译和测试时需要使用，而在运行时已经被系统或者容器提供，所以不需要打包到最终的应用程序中。
        runtime：表示该依赖库只在运行时需要使用，而在编译和测试时则不需要。
        test：表示该依赖库只在测试时需要使用，而在编译和运行时则不需要。
        比如说我们引入了 junit 包，但显然这个包我们不需要在打包时包含，只是用于测试，那么我们就可以将 junit 的 scope 设置为 test。
        -->

        <!-- Spring Boot Web 依赖，用于创建 Web 应用 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot 测试依赖，包含 JUnit、Mockito 等测试框架 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!--
    repositories:
        指定Maven仓库，即使用 <repositories> 和 <repository>标签，<repository>用于指定一个Maven仓库，它包含以下几个子标签：
            • <id>：指定Maven仓库的ID。
            • <name>：指定Maven仓库的名称。
            • <url>：指定Maven仓库的URL
    -->
    <repositories> </repositories>

    <!--
    build:
        定义项目的构建配置，包括源代码目录、资源目录、插件等。
        资源目录这种路径是没有默认值的，但根据Maven的约定优于配置原则（Convention over Configuration），Maven会使用默认的目录结构去查找源代码和测试代码
    -->
    <build>
        <sourceDirectory>src/main/java</sourceDirectory>  <!-- 和默认的一致 -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>   <!-- 和默认的一致 -->
            </resource>
        </resources>

        <!--
            定义 Maven 插件， plugins 主要用于扩展 Maven 的功能，帮助开发人员更方便地构建、打包、发布项目。
            插件可以通过 Maven 的插件中心或者自己构建的私有仓库来使用，能在构建过程中执行特定的任务，比如编译、打包、测试等。

            插件的配置可以分为两种方式：全局配置和项目配置。全局配置是在 Maven 安装目录下的 conf/settings.xml 文件中进行配置，可以被所有的项目使用。
            项目配置则是在项目的 pom.xml 文件中进行配置，只对当前项目生效。
         -->
        <plugins>
            <!-- Spring Boot Maven 插件，用于打包和运行 Spring Boot 应用 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <!--
     profiles:
        定义多个构建配置，用于根据不同环境进行构建。
        比如开发环境、测试环境、生产环境等，可以在不同的环境中使用不同的配置
      -->
    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>beta</id>
        </profile>
        <profile>
            <id>prod</id>
        </profile>
    </profiles>
</project>